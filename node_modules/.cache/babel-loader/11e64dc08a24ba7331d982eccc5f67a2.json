{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirma\\\\data\\\\ap_2021_2022\\\\it-project\\\\ProjectAp2022\\\\it-project-frontend\\\\src\\\\components\\\\Compare\\\\ApiCallNBB.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ApiCallNBB = _ref => {\n  _s();\n\n  let {\n    companyInfo,\n    vatInput,\n    setCompanyInfo\n  } = _ref;\n  const [errorState1, setErrorState1] = useState(false);\n  const [errorState2, setErrorState2] = useState(false);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    //for testing purposes please regard changing your localhost port.\n    GetCompanyDetailsFirst();\n    GetCompanyDetailsSecond();\n  }, []); //response can only be called per method, this is the reason two API call methodes were made.\n  //both calls are in a try catch so the app won't crash, user will be notified if the VAT they've used was valid.\n\n  const GetCompanyDetailsFirst = async () => {\n    try {\n      setLoading(true);\n      let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\n      let response = await fetch(`${url}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n      let data = await response.json();\n      console.log(data.finalCompanyData);\n      setCompanyInfo(data.finalCompanyData);\n      setLoading(false);\n    } catch (error) {\n      setErrorState1(true);\n    }\n  };\n\n  const GetCompanyDetailsSecond = async () => {\n    try {\n      setLoading(true);\n      let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\n      let response = await fetch(`${url}`, {\n        method: 'GET',\n        headers: {\n          'content-type': 'application/json',\n          'Access-Control-Allow-Origin': '*'\n        }\n      });\n      let data = await response.json();\n      console.log(data);\n      setCompanyInfo(data.finalCompanyData);\n      setLoading(false);\n    } catch (error) {\n      setErrorState2(true);\n    }\n  }; //renders that the user will see when they've provide the data, condition statements make sure the user will be notified when wrong inputs have been made.\n\n\n  if (errorState1 === false && errorState2 === false) {\n    return /*#__PURE__*/_jsxDEV(CompanyCard, {\n      companyInfo: companyInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  } else if (errorState1 === true && errorState2 === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: \"Failed to find the first result, please try again with a valid VAT number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  } else if (errorState1 === false && errorState2 === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: \"Failed to find the second result, please try again with a valid VAT number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: \"Failed to find any results, please try again using valid VAT numbers!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(ApiCallNBB, \"x0pnD5acpDmGEmkfuwj7RSJAbwc=\");\n\n_c = ApiCallNBB;\nexport default ApiCallNBB;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiCallNBB\");","map":{"version":3,"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/components/Compare/ApiCallNBB.tsx"],"names":["useEffect","useState","CompanyCard","ApiCallNBB","companyInfo","vatInput","setCompanyInfo","errorState1","setErrorState1","errorState2","setErrorState2","loading","setLoading","GetCompanyDetailsFirst","GetCompanyDetailsSecond","url","response","fetch","method","headers","data","json","console","log","finalCompanyData","error"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { ICompanyData } from \"../../types\";\r\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\r\n\r\n\r\ninterface APICallNBBProps {\r\n    vatInput: string[],\r\n    companyInfo: ICompanyData[],\r\n    setCompanyInfo: React.Dispatch<React.SetStateAction<ICompanyData[]>>\r\n}\r\n\r\n\r\nconst ApiCallNBB = ({ companyInfo, vatInput, setCompanyInfo }: APICallNBBProps) => {\r\n    const [errorState1, setErrorState1] = useState<boolean>(false);\r\n    const [errorState2, setErrorState2] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        //for testing purposes please regard changing your localhost port.\r\n        GetCompanyDetailsFirst();\r\n        GetCompanyDetailsSecond();\r\n    }, []);\r\n    //response can only be called per method, this is the reason two API call methodes were made.\r\n    //both calls are in a try catch so the app won't crash, user will be notified if the VAT they've used was valid.\r\n    const GetCompanyDetailsFirst = async () => {\r\n        try {\r\n            setLoading(true);\r\n            let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\r\n            let response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            });\r\n            let data = await response.json();\r\n            console.log(data.finalCompanyData);\r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n\r\n            setLoading(false);\r\n\r\n        } catch (error) {\r\n            setErrorState1(true);\r\n        }\r\n\r\n    }\r\n    const GetCompanyDetailsSecond = async () => {\r\n\r\n        try {\r\n            setLoading(true);\r\n            let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\r\n            let response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            });\r\n            let data = await response.json();\r\n            console.log(data);\r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n            setLoading(false);\r\n\r\n        } catch (error) {\r\n            setErrorState2(true);\r\n        }\r\n\r\n    }\r\n\r\n//renders that the user will see when they've provide the data, condition statements make sure the user will be notified when wrong inputs have been made.\r\n    if (errorState1 === false && errorState2 === false) {\r\n        return (\r\n            <CompanyCard companyInfo={companyInfo} />\r\n        )\r\n    }\r\n    else if (errorState1 === true && errorState2 === false) {\r\n        return (\r\n            <div>\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to find the first result, please try again with a valid VAT number!\r\n                </div>\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else if (errorState1 === false && errorState2 === true) {\r\n        return (\r\n            <div>\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to find the second result, please try again with a valid VAT number!\r\n                </div>\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Failed to find any results, please try again using valid VAT numbers!\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ApiCallNBB;"]},"metadata":{},"sourceType":"module"}