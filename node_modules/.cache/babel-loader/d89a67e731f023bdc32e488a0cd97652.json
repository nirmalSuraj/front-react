{"ast":null,"code":"class Cookie {\n  /**\r\n  * \r\n  * @param name string\r\n  * @returns string|null \r\n  */\n  // Given a cookie key `name`, returns the value of\n  // the cookie or `null`, if the key is not found.\n  Cookie(name) {\n    const nameLenPlus = name.length + 1;\n    const val = document.cookie.split(';').map(c => c.trim()).filter(cookie => {\n      return cookie.substring(0, nameLenPlus) === `${name}=`;\n    }).map(cookie => {\n      return decodeURIComponent(cookie.substring(nameLenPlus));\n    })[0] || null;\n    return val;\n  }\n\n  AuthSession(name) {\n    if (this.Cookie(name) === null) return false;\n    if (this.Cookie(name) == \"true\") return true;\n    if (this.Cookie(name) == \"flase\") return true;\n    return false;\n  }\n  /**\r\n   * \r\n   * @param name  string name of the cookie\r\n   * @returns string value of the cookie\r\n   */\n\n\n  GetCookies(name) {\n    const cookie = this.Cookie(name);\n    if (cookie === null) return false;\n    return cookie;\n  }\n  /**\r\n   * \r\n   * @param name string key cookie\r\n   * @param value string value of the cookie\r\n   * @param days number days  expires in 30 days\r\n   * @returns bool if the cookie was created then return true els false\r\n   */\n\n\n  SetCookie(name, value, days) {\n    let expires = \"\";\n\n    if (days) {\n      var date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      expires = \"; expires=\" + date.toUTCString();\n    }\n\n    document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n    if (this.GetCookies(name) !== null) return true;else return false;\n  }\n  /**\r\n   * \r\n   * @param name string name cookie to delete\r\n   * @returns bool will return true\r\n   */\n\n\n  DeleteCookie(name) {\n    document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n    return true;\n  }\n\n}\n\nconst cookie = new Cookie();\nexport default cookie;","map":{"version":3,"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/class/Cookie/Cookie.ts"],"names":["Cookie","name","nameLenPlus","length","val","document","cookie","split","map","c","trim","filter","substring","decodeURIComponent","AuthSession","GetCookies","SetCookie","value","days","expires","date","Date","setTime","getTime","toUTCString","DeleteCookie"],"mappings":"AAAA,MAAMA,MAAN,CAAY;AACQ;AACpB;AACA;AACA;AACA;AAEY;AACA;AACSA,EAAAA,MAAM,CAACC,IAAD,EAA2B;AACtC,UAAMC,WAAW,GAAID,IAAI,CAACE,MAAL,GAAc,CAAnC;AAGA,UAAMC,GAAe,GAAGC,QAAQ,CAACC,MAAT,CACnBC,KADmB,CACb,GADa,EAEnBC,GAFmB,CAEfC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAFU,EAGnBC,MAHmB,CAGZL,MAAM,IAAI;AACd,aAAOA,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBV,WAApB,MAAsC,GAAED,IAAK,GAApD;AACH,KALmB,EAMnBO,GANmB,CAMfF,MAAM,IAAI;AACX,aAAOO,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBV,WAAjB,CAAD,CAAzB;AACH,KARmB,EAQjB,CARiB,KAQX,IARb;AAUI,WAAOE,GAAP;AACP;;AAGOU,EAAAA,WAAW,CAACb,IAAD,EAAqB;AAEpC,QAAG,KAAKD,MAAL,CAAYC,IAAZ,MAAsB,IAAzB,EAA+B,OAAO,KAAP;AAE/B,QAAG,KAAKD,MAAL,CAAYC,IAAZ,KAAqB,MAAxB,EAAgC,OAAO,IAAP;AAChC,QAAG,KAAKD,MAAL,CAAYC,IAAZ,KAAqB,OAAxB,EAAiC,OAAO,IAAP;AAEjC,WAAO,KAAP;AAEH;AAKD;AACZ;AACA;AACA;AACA;;;AAEoBc,EAAAA,UAAU,CAACd,IAAD,EAA4B;AAC1C,UAAMK,MAAkB,GAAG,KAAKN,MAAL,CAAYC,IAAZ,CAA3B;AACA,QAAGK,MAAM,KAAK,IAAd,EAAoB,OAAO,KAAP;AAEpB,WAAOA,MAAP;AAEH;AAED;AACZ;AACA;AACA;AACA;AACA;AACA;;;AAEoBU,EAAAA,SAAS,CAACf,IAAD,EAAagB,KAAb,EAAuBC,IAAvB,EAA4C;AAEzD,QAAIC,OAAc,GAAG,EAArB;;AAEA,QAAID,IAAJ,EAAU;AACN,UAAIE,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAkBL,IAAI,GAAC,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,IAA7C;AACAC,MAAAA,OAAO,GAAG,eAAeC,IAAI,CAACI,WAAL,EAAzB;AACH;;AACDnB,IAAAA,QAAQ,CAACC,MAAT,GAAkBL,IAAI,GAAG,GAAP,IAAcgB,KAAK,IAAI,EAAvB,IAA8BE,OAA9B,GAAwC,UAA1D;AAGA,QAAG,KAAKJ,UAAL,CAAgBd,IAAhB,MAA0B,IAA7B,EAAmC,OAAO,IAAP,CAAnC,KACK,OAAO,KAAP;AAER;AAED;AACZ;AACA;AACA;AACA;;;AACmBwB,EAAAA,YAAY,CAACxB,IAAD,EAAsB;AACrCI,IAAAA,QAAQ,CAACC,MAAT,GAAkBL,IAAI,GAAE,mDAAxB;AAEA,WAAO,IAAP;AAEH;;AA1FD;;AA8FZ,MAAMK,MAAM,GAAG,IAAIN,MAAJ,EAAf;AAEA,eAAeM,MAAf","sourcesContent":["class Cookie{\r\n                    /**\r\n                 * \r\n                 * @param name string\r\n                 * @returns string|null \r\n                 */\r\n\r\n            // Given a cookie key `name`, returns the value of\r\n            // the cookie or `null`, if the key is not found.\r\n            private  Cookie(name: string):string|null {\r\n                const nameLenPlus = (name.length + 1);\r\n\r\n\r\n                const val:string|null = document.cookie\r\n                    .split(';')\r\n                    .map(c => c.trim())\r\n                    .filter(cookie => {\r\n                        return cookie.substring(0, nameLenPlus) === `${name}=`;\r\n                    })\r\n                    .map(cookie => {\r\n                        return decodeURIComponent(cookie.substring(nameLenPlus));\r\n                    })[0] || null;\r\n            \r\n                    return val;\r\n            }\r\n\r\n\r\n            public  AuthSession(name:string):boolean{\r\n\r\n                if(this.Cookie(name) === null) return false;\r\n\r\n                if(this.Cookie(name) == \"true\") return true;\r\n                if(this.Cookie(name) == \"flase\") return true;\r\n\r\n                return false;\r\n\r\n            }\r\n\r\n\r\n            \r\n\r\n            /**\r\n             * \r\n             * @param name  string name of the cookie\r\n             * @returns string value of the cookie\r\n             */\r\n\r\n            public  GetCookies(name:string):string|boolean{\r\n                const cookie:string|null = this.Cookie(name);\r\n                if(cookie === null) return false;\r\n\r\n                return cookie;\r\n\r\n            }\r\n\r\n            /**\r\n             * \r\n             * @param name string key cookie\r\n             * @param value string value of the cookie\r\n             * @param days number days  expires in 30 days\r\n             * @returns bool if the cookie was created then return true els false\r\n             */\r\n\r\n            public  SetCookie(name:string,value:any,days:number):boolean {\r\n                \r\n                let expires:string = \"\";\r\n\r\n                if (days) {\r\n                    var date = new Date();\r\n                    date.setTime(date.getTime() + (days*24*60*60*1000));\r\n                    expires = \"; expires=\" + date.toUTCString();\r\n                }\r\n                document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\r\n\r\n\r\n                if(this.GetCookies(name) !== null) return true;\r\n                else return false;\r\n\r\n            }\r\n\r\n            /**\r\n             * \r\n             * @param name string name cookie to delete\r\n             * @returns bool will return true\r\n             */\r\n            public DeleteCookie(name:string):boolean {\r\n                document.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n                \r\n                return true;\r\n\r\n            }\r\n}\r\n\r\n\r\nconst cookie = new Cookie();\r\n\r\nexport default cookie;"]},"metadata":{},"sourceType":"module"}