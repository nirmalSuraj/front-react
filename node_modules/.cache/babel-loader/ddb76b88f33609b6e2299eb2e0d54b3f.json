{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirma\\\\data\\\\ap_2021_2022\\\\it-project\\\\ProjectAp2022\\\\it-project-frontend\\\\src\\\\components\\\\Compare\\\\ApiCallNBB.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = cookie.GetCookies(\"base\");\n\nconst ApiCallNBB = _ref => {\n  _s();\n\n  let {\n    companyInfo,\n    companyVAT,\n    setCompanyInfo\n  } = _ref;\n  const [errorState1, setErrorState1] = useState(false);\n  const [errorState2, setErrorState2] = useState(false);\n  const [loading, setLoading] = useState(true); //arranges the post, will be moved to a component of its own.\n\n  useEffect(() => {\n    //for testing purposes please regard changing your localhost port.\n    Promise.all([GetCompanyDetails()]);\n  }, []); //response can only be called per method, this is the reason two API call methodes were made.\n  //both calls are in a try catch so the app won't crash, user will be notified if the VAT they've used was valid.\n\n  const GetCompanyDetails = async () => {\n    setLoading(true);\n    let dataBucket = [];\n    let errorcount = 0;\n\n    for (let i = 0; i < companyVAT.length; i++) {\n      try {\n        errorcount = errorcount + 1;\n        let url = `${base}/nbbapi/${companyVAT[i]}`;\n        let response = await fetch(`${url}`, {\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n        let data = await response.json();\n        dataBucket = [...dataBucket, ...data.finalCompanyData];\n      } catch (error) {\n        errorState(errorcount);\n      }\n    }\n\n    setCompanyInfo(dataBucket);\n    setLoading(false);\n  }; //errorState method determines which exception needs to be triggered.\n\n\n  const errorState = count => {\n    console.log(count);\n\n    if (count === 1) {\n      setErrorState1(true);\n    } else if (count === 2) {\n      setErrorState2(true);\n    } else {\n      setErrorState1(true);\n      setErrorState2(true);\n    }\n  };\n  /*const GetCompanyDetailsFirst = async () => {\r\n      try {\r\n          setLoading(true);\r\n          let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\r\n          let response = await fetch(`${url}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                  'content-type': 'application/json',\r\n                  'Access-Control-Allow-Origin': '*'\r\n              }\r\n          });\r\n          let data = await response.json();\r\n    \r\n    \r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n         \r\n          setLoading(false);\r\n        } catch (error) {\r\n          setErrorState1(true);\r\n      }\r\n    }\r\n  const GetCompanyDetailsSecond = async () => {\r\n        try {\r\n          setLoading(true);\r\n          let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\r\n          let response = await fetch(`${url}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                  'content-type': 'application/json',\r\n                  'Access-Control-Allow-Origin': '*'\r\n              }\r\n          });\r\n          let data = await response.json();\r\n          const hold = data;\r\n          \r\n          setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n          PostToHistory(data.finalCompanyData .pop())\r\n          setLoading(false);\r\n        } catch (error) {\r\n          setErrorState2(true);\r\n      }\r\n    }*/\n  //renders that the user will see when they've provide the data, condition statements make sure the user will be notified when wrong inputs have been made.\n\n\n  if (errorState1 === false && errorState2 === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-around\",\n      children: /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this);\n  } else if (errorState1 === true && errorState2 === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: \"Failed to find the first result, please try again with a valid VAT number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  } else if (errorState1 === false && errorState2 === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: \"Failed to find the second result, please try again with a valid VAT number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: \"Failed to find any results, please try again using valid VAT numbers!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(ApiCallNBB, \"x0pnD5acpDmGEmkfuwj7RSJAbwc=\");\n\n_c = ApiCallNBB;\nexport default ApiCallNBB;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiCallNBB\");","map":{"version":3,"names":["useEffect","useState","CompanyCard","base","cookie","GetCookies","ApiCallNBB","companyInfo","companyVAT","setCompanyInfo","errorState1","setErrorState1","errorState2","setErrorState2","loading","setLoading","Promise","all","GetCompanyDetails","dataBucket","errorcount","i","length","url","response","fetch","method","headers","data","json","finalCompanyData","error","errorState","count","console","log"],"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/components/Compare/ApiCallNBB.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { ICompanyData, IPostCompanyData } from \"../../types\";\r\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\r\nimport PostCallDB from \"./PostCallDB\";\r\n\r\nconst base =    cookie.GetCookies(\"base\");\r\n\r\n\r\n\r\ninterface APICallNBBProps {\r\n    companyVAT: string[],\r\n    companyInfo: ICompanyData[],\r\n    setCompanyInfo: React.Dispatch<React.SetStateAction<ICompanyData[]>>\r\n}\r\n\r\n\r\nconst ApiCallNBB = ({ companyInfo, companyVAT, setCompanyInfo }: APICallNBBProps) => {\r\n    const [errorState1, setErrorState1] = useState<boolean>(false);\r\n    const [errorState2, setErrorState2] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n\r\n    //arranges the post, will be moved to a component of its own.\r\n\r\n    useEffect(() => {\r\n        //for testing purposes please regard changing your localhost port.\r\n        Promise.all([GetCompanyDetails()]);\r\n\r\n\r\n    }, []);\r\n    //response can only be called per method, this is the reason two API call methodes were made.\r\n    //both calls are in a try catch so the app won't crash, user will be notified if the VAT they've used was valid.\r\n\r\n    const GetCompanyDetails = async () => {\r\n\r\n        setLoading(true);\r\n        let dataBucket: ICompanyData[] = [];\r\n        let errorcount = 0;\r\n        for (let i = 0; i < companyVAT.length; i++) {\r\n            try {\r\n                errorcount = errorcount + 1;\r\n                let url = `${base}/nbbapi/${companyVAT[i]}`;\r\n                let response = await fetch(`${url}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'content-type': 'application/json',\r\n                        'Access-Control-Allow-Origin': '*'\r\n                    }\r\n                });\r\n                let data = await response.json();\r\n                dataBucket = [...dataBucket, ...data.finalCompanyData as ICompanyData[]];\r\n            }\r\n\r\n            catch (error) {\r\n                errorState(errorcount);\r\n\r\n            }\r\n        }\r\n        setCompanyInfo(dataBucket);\r\n        setLoading(false);\r\n    }\r\n\r\n    //errorState method determines which exception needs to be triggered.\r\n    const errorState = (count: number) => {\r\n        console.log(count);\r\n\r\n        if (count === 1) {\r\n            setErrorState1(true);\r\n        }\r\n        else if (count === 2) {\r\n            setErrorState2(true);\r\n        }\r\n        else {\r\n            setErrorState1(true);\r\n            setErrorState2(true);\r\n        }\r\n    }\r\n\r\n    /*const GetCompanyDetailsFirst = async () => {\r\n        try {\r\n            setLoading(true);\r\n            let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\r\n            let response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            });\r\n            let data = await response.json();\r\n      \r\n      \r\n\r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n           \r\n            setLoading(false);\r\n\r\n        } catch (error) {\r\n            setErrorState1(true);\r\n        }\r\n\r\n    }\r\n    const GetCompanyDetailsSecond = async () => {\r\n\r\n        try {\r\n            setLoading(true);\r\n            let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\r\n            let response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            });\r\n            let data = await response.json();\r\n            const hold = data;\r\n            \r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n            PostToHistory(data.finalCompanyData .pop())\r\n            setLoading(false);\r\n\r\n        } catch (error) {\r\n            setErrorState2(true);\r\n        }\r\n\r\n    }*/\r\n\r\n    //renders that the user will see when they've provide the data, condition statements make sure the user will be notified when wrong inputs have been made.\r\n\r\n\r\n\r\n    if (errorState1 === false && errorState2 === false) {\r\n        return (\r\n            <div className=\"d-flex justify-content-around\">\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n    else if (errorState1 === true && errorState2 === false) {\r\n        return (\r\n            <div >\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to find the first result, please try again with a valid VAT number!\r\n                </div>\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else if (errorState1 === false && errorState2 === true) {\r\n        return (\r\n            <div>\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to find the second result, please try again with a valid VAT number!\r\n                </div>\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Failed to find any results, please try again using valid VAT numbers!\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ApiCallNBB;"],"mappings":"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"},"metadata":{},"sourceType":"module"}