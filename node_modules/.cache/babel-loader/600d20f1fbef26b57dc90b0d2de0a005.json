{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirma\\\\data\\\\ap_2021_2022\\\\it-project\\\\ProjectAp2022\\\\it-project-frontend\\\\src\\\\components\\\\CompanyCard\\\\CompanyCard.tsx\";\nimport { Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst compare = (companyInfo, field) => {\n  let getColumn = field;\n\n  switch (field) {\n    case \"depositDate\":\n      return companyInfo[0][getColumn] > companyInfo[1][getColumn];\n      break;\n  }\n\n  console.log(companyInfo[0].companyProfit > companyInfo[1].companyProfit);\n};\n\nconst CompanyCard = _ref => {\n  let {\n    companyInfo\n  } = _ref;\n\n  if (companyInfo.length > 0) {\n    compare(companyInfo);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: companyInfo === null || companyInfo === void 0 ? void 0 : companyInfo.map((c, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-3  mt-5 ml-5\",\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          style: {\n            width: '100%',\n            minHeight: \"400px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Card.Body, {\n            children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n              children: c.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"VAT : \", c.vat, \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Adress: \", c.address]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Publishing Date: \", c.depositDate]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Equity: \", c.equitity]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Debts: \", c.debt]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n              children: [\"Profit: \", c.companyProfit]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this);\n    })\n  }, void 0, false);\n};\n\n_c = CompanyCard;\nexport default CompanyCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyCard\");","map":{"version":3,"names":["Card","compare","companyInfo","field","getColumn","console","log","companyProfit","CompanyCard","length","map","c","i","width","minHeight","name","vat","address","depositDate","equitity","debt"],"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/components/CompanyCard/CompanyCard.tsx"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { SiteContext } from \"../../context\";\r\nimport { ICompanyData } from \"../../types\";\r\n\r\ninterface CompanyCardProps {\r\n  companyInfo: ICompanyData[]\r\n// text-danger , text-success \r\n}\r\n\r\n\r\nconst compare = (companyInfo:ICompanyData[],field : string)=>{\r\n\r\n type ObjectKey = keyof typeof companyInfo; \r\n let  getColumn  =field as ObjectKey;\r\n\r\n  switch(field){\r\n    case \"depositDate\":\r\n      \r\n      return companyInfo[0][getColumn] > companyInfo[1][getColumn]\r\n    break\r\n\r\n  }\r\n  console.log(companyInfo[0].companyProfit > companyInfo[1].companyProfit)\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst CompanyCard = ({ companyInfo }: CompanyCardProps) => {\r\n  if(companyInfo.length > 0){\r\n  compare(companyInfo);\r\n}\r\n  return (\r\n      \r\n      <>\r\n      { companyInfo?.map((c: ICompanyData,i:number) => {\r\n            return (\r\n              <div className=\"col-md-3  mt-5 ml-5\">\r\n              <Card style={{ width: '100%',minHeight:\"400px\" }}>\r\n                <Card.Body>\r\n                  <Card.Title>{c.name}</Card.Title>\r\n                  <Card.Text>VAT : {c.vat} </Card.Text>\r\n                  <Card.Text>Adress: {c.address}</Card.Text>\r\n                  <Card.Text>Publishing Date: {c.depositDate}</Card.Text>\r\n                  <Card.Text>Equity: {c.equitity}</Card.Text>\r\n                  <Card.Text>Debts: {c.debt}</Card.Text>\r\n                  <Card.Text>Profit: {c.companyProfit}</Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n              </div>\r\n            )\r\n          }\r\n          )\r\n      }\r\n \r\n </>\r\n\r\n  )\r\n}\r\n\r\nexport default CompanyCard;"],"mappings":";AACA,SAASA,IAAT,QAA6B,iBAA7B;;;;AAWA,MAAMC,OAAO,GAAG,CAACC,WAAD,EAA4BC,KAA5B,KAA6C;EAG5D,IAAKC,SAAS,GAAGD,KAAjB;;EAEC,QAAOA,KAAP;IACE,KAAK,aAAL;MAEE,OAAOD,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAf,IAA4BF,WAAW,CAAC,CAAD,CAAX,CAAeE,SAAf,CAAnC;MACF;EAJF;;EAOAC,OAAO,CAACC,GAAR,CAAYJ,WAAW,CAAC,CAAD,CAAX,CAAeK,aAAf,GAA+BL,WAAW,CAAC,CAAD,CAAX,CAAeK,aAA1D;AAID,CAhBD;;AAoBA,MAAMC,WAAW,GAAG,QAAuC;EAAA,IAAtC;IAAEN;EAAF,CAAsC;;EACzD,IAAGA,WAAW,CAACO,MAAZ,GAAqB,CAAxB,EAA0B;IAC1BR,OAAO,CAACC,WAAD,CAAP;EACD;;EACC,oBAEI;IAAA,UACEA,WADF,aACEA,WADF,uBACEA,WAAW,CAAEQ,GAAb,CAAiB,CAACC,CAAD,EAAiBC,CAAjB,KAA8B;MAC3C,oBACE;QAAK,SAAS,EAAC,qBAAf;QAAA,uBACA,QAAC,IAAD;UAAM,KAAK,EAAE;YAAEC,KAAK,EAAE,MAAT;YAAgBC,SAAS,EAAC;UAA1B,CAAb;UAAA,uBACE,QAAC,IAAD,CAAM,IAAN;YAAA,wBACE,QAAC,IAAD,CAAM,KAAN;cAAA,UAAaH,CAAC,CAACI;YAAf;cAAA;cAAA;cAAA;YAAA,QADF,eAEE,QAAC,IAAD,CAAM,IAAN;cAAA,qBAAkBJ,CAAC,CAACK,GAApB;YAAA;cAAA;cAAA;cAAA;YAAA,QAFF,eAGE,QAAC,IAAD,CAAM,IAAN;cAAA,uBAAoBL,CAAC,CAACM,OAAtB;YAAA;cAAA;cAAA;cAAA;YAAA,QAHF,eAIE,QAAC,IAAD,CAAM,IAAN;cAAA,gCAA6BN,CAAC,CAACO,WAA/B;YAAA;cAAA;cAAA;cAAA;YAAA,QAJF,eAKE,QAAC,IAAD,CAAM,IAAN;cAAA,uBAAoBP,CAAC,CAACQ,QAAtB;YAAA;cAAA;cAAA;cAAA;YAAA,QALF,eAME,QAAC,IAAD,CAAM,IAAN;cAAA,sBAAmBR,CAAC,CAACS,IAArB;YAAA;cAAA;cAAA;cAAA;YAAA,QANF,eAOE,QAAC,IAAD,CAAM,IAAN;cAAA,uBAAoBT,CAAC,CAACJ,aAAtB;YAAA;cAAA;cAAA;cAAA;YAAA,QAPF;UAAA;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA;MADA;QAAA;QAAA;QAAA;MAAA,QADF;IAeD,CAhBH;EADF,iBAFJ;AA0BD,CA9BD;;KAAMC,W;AAgCN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}