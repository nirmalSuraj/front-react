{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirma\\\\data\\\\ap_2021_2022\\\\it-project\\\\ProjectAp2022\\\\it-project-frontend\\\\src\\\\components\\\\Compare\\\\PostCallDB.tsx\",\n    _s = $RefreshSig$();\n\nimport auth from \"../../class/Auth/Auth\";\nimport cookie from \"../../class/Cookie/Cookie\";\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = cookie.GetCookies(\"base\");\n\nconst PostCallDB = _ref => {\n  _s();\n\n  let {\n    company\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    //triggers the PostCall\n    setTimeout(() => {\n      console.log(\"start\");\n      PostToHistory(company);\n      console.log(\"stop\");\n    }, 2000);\n  }, []); //PostToHistory function will map out the CompanyInfo Array, every object prop from CompanyInfo will be asigned to the epost object.\n\n  const PostToHistory = async companies => {\n    var _company$depositDate;\n\n    setLoading(true);\n    let epost = {\n      address: company.address,\n      companyProfit: company.companyProfit.toString(),\n      debt: company.debt.toString(),\n      depositDate: (_company$depositDate = company.depositDate) === null || _company$depositDate === void 0 ? void 0 : _company$depositDate.toString(),\n      equitity: company.equitity.toString(),\n      name: company.name,\n      vat: company.vat\n    };\n    console.log(epost);\n\n    if (auth.Auth()) {\n      try {\n        const response = await fetch(`${base}/api/history/history`, {\n          method: 'POST',\n          body: JSON.stringify(epost),\n          headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Credentials\": \"true\",\n            \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\n            \"Access-Control-Allow-Methods\": \"POST\",\n            'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error(`Error! status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('result is: ', JSON.stringify(result));\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          console.log('error message: ', error.message);\n          return error.message;\n        } else {\n          console.log('unexpected error: ', error);\n          return 'An unexpected error occurred';\n        }\n      }\n    }\n\n    setLoading(false);\n    /*let epost: IPostCompanyData;\r\n    companies.map(async (e: ICompanyData) => {\r\n        epost = {\r\n            address: e.address,\r\n            companyProfit: e.companyProfit.toString(),\r\n            debt: e.debt.toString(),\r\n            depositDate: e.depositDate?.toString(),\r\n            equitity: e.equitity.toString(),\r\n            name: e.name,\r\n            vat: e.vat\r\n          }\r\n        console.log(epost)\r\n        if (auth.Auth()) {\r\n            try {\r\n                const response = await fetch('https://localhost:44391/api/history/history', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(epost),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        \"Access-Control-Allow-Origin\": \"*\",\r\n                        \"Access-Control-Allow-Credentials\": \"true\",\r\n                        \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\r\n                        \"Access-Control-Allow-Methods\": \"POST\",\r\n                        'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\r\n                    },\r\n                });\r\n                  if (!response.ok) {\r\n                    throw new Error(`Error! status: ${response.status}`);\r\n                }\r\n                const result = (await response.json());\r\n                  console.log('result is: ', JSON.stringify(result));\r\n                  return result;\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    console.log('error message: ', error.message);\r\n                    return error.message;\r\n                } else {\r\n                    console.log('unexpected error: ', error);\r\n                    return 'An unexpected error occurred';\r\n                }\r\n            }\r\n          }\r\n              setLoading(false);\r\n      })/*\r\n        /*let epost: IPostCompanyData = {\r\n        address: e.address,\r\n        companyProfit: e.companyProfit.toString(),\r\n        debt: e.debt.toString(),\r\n        depositDate: e.depositDate?.toString(),\r\n        equitity: e.equitity.toString(),\r\n        name: e.name,\r\n        vat: e.vat\r\n    }\r\n    if (auth.Auth())\r\n          try {\r\n            const response = await fetch('https://localhost:44391/api/history/history', {\r\n                method: 'POST',\r\n                body: JSON.stringify(epost),\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    \"Access-Control-Allow-Origin\": \"*\",\r\n                    \"Access-Control-Allow-Credentials\": \"true\",\r\n                    \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\r\n                    \"Access-Control-Allow-Methods\": \"POST\",\r\n                    'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\r\n                },\r\n            });\r\n              if (!response.ok) {\r\n                throw new Error(`Error! status: ${response.status}`);\r\n            }\r\n            const result = (await response.json());\r\n              console.log('result is: ', JSON.stringify(result));\r\n              return result;\r\n        } catch (error) {\r\n            if (error instanceof Error) {\r\n                console.log('error message: ', error.message);\r\n                return error.message;\r\n            } else {\r\n                console.log('unexpected error: ', error);\r\n                return 'An unexpected error occurred';\r\n            }\r\n        }\r\n        */\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 13\n  }, this);\n};\n\n_s(PostCallDB, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n\n_c = PostCallDB;\nexport default PostCallDB;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostCallDB\");","map":{"version":3,"names":["auth","cookie","useEffect","useState","base","GetCookies","PostCallDB","company","loading","setLoading","setTimeout","console","log","PostToHistory","companies","epost","address","companyProfit","toString","debt","depositDate","equitity","name","vat","Auth","response","fetch","method","body","JSON","stringify","headers","ok","Error","status","result","json","error","message"],"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/components/Compare/PostCallDB.tsx"],"sourcesContent":["import { ICompanyData, IPostCompanyData } from \"../../types\";\r\nimport auth from \"../../class/Auth/Auth\";\r\nimport cookie from \"../../class/Cookie/Cookie\";\r\nimport { useEffect, useState } from \"react\";\r\nconst base =    cookie.GetCookies(\"base\");\r\n\r\ninterface PostCallDBProps {\r\n    company: ICompanyData\r\n}\r\n\r\n\r\n\r\n\r\nconst PostCallDB = ({ company }: PostCallDBProps) => {\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n\r\n    useEffect(() => {\r\n        //triggers the PostCall\r\n        setTimeout(() => {\r\n            console.log(\"start\");\r\n\r\n            PostToHistory(company);\r\n            console.log(\"stop\");\r\n\r\n        }, 2000);\r\n    }, []);\r\n//PostToHistory function will map out the CompanyInfo Array, every object prop from CompanyInfo will be asigned to the epost object.\r\n\r\n    const PostToHistory = async (companies: ICompanyData) => {\r\n        setLoading(true);\r\n\r\n        let epost: IPostCompanyData = {\r\n            address: company.address,\r\n            companyProfit: company.companyProfit.toString(),\r\n            debt: company.debt.toString(),\r\n            depositDate: company.depositDate?.toString(),\r\n            equitity: company.equitity.toString(),\r\n            name: company.name,\r\n            vat: company.vat\r\n        }\r\n        console.log(epost)\r\n        if (auth.Auth()) {\r\n            try {\r\n                const response = await fetch(`${base}/api/history/history`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(epost),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        \"Access-Control-Allow-Origin\": \"*\",\r\n                        \"Access-Control-Allow-Credentials\": \"true\",\r\n                        \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\r\n                        \"Access-Control-Allow-Methods\": \"POST\",\r\n                        'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\r\n                    },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Error! status: ${response.status}`);\r\n                }\r\n                const result = (await response.json());\r\n\r\n                console.log('result is: ', JSON.stringify(result));\r\n\r\n                return result;\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    console.log('error message: ', error.message);\r\n                    return error.message;\r\n                } else {\r\n                    console.log('unexpected error: ', error);\r\n                    return 'An unexpected error occurred';\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        setLoading(false);\r\n\r\n        /*let epost: IPostCompanyData;\r\n        companies.map(async (e: ICompanyData) => {\r\n            epost = {\r\n                address: e.address,\r\n                companyProfit: e.companyProfit.toString(),\r\n                debt: e.debt.toString(),\r\n                depositDate: e.depositDate?.toString(),\r\n                equitity: e.equitity.toString(),\r\n                name: e.name,\r\n                vat: e.vat\r\n\r\n            }\r\n            console.log(epost)\r\n            if (auth.Auth()) {\r\n                try {\r\n                    const response = await fetch('https://localhost:44391/api/history/history', {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(epost),\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            \"Access-Control-Allow-Origin\": \"*\",\r\n                            \"Access-Control-Allow-Credentials\": \"true\",\r\n                            \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\r\n                            \"Access-Control-Allow-Methods\": \"POST\",\r\n                            'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\r\n                        },\r\n                    });\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error(`Error! status: ${response.status}`);\r\n                    }\r\n                    const result = (await response.json());\r\n\r\n                    console.log('result is: ', JSON.stringify(result));\r\n\r\n                    return result;\r\n                } catch (error) {\r\n                    if (error instanceof Error) {\r\n                        console.log('error message: ', error.message);\r\n                        return error.message;\r\n                    } else {\r\n                        console.log('unexpected error: ', error);\r\n                        return 'An unexpected error occurred';\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            setLoading(false);\r\n\r\n        })/*\r\n\r\n\r\n        /*let epost: IPostCompanyData = {\r\n            address: e.address,\r\n            companyProfit: e.companyProfit.toString(),\r\n            debt: e.debt.toString(),\r\n            depositDate: e.depositDate?.toString(),\r\n            equitity: e.equitity.toString(),\r\n            name: e.name,\r\n            vat: e.vat\r\n        }\r\n        if (auth.Auth())\r\n\r\n            try {\r\n                const response = await fetch('https://localhost:44391/api/history/history', {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(epost),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        \"Access-Control-Allow-Origin\": \"*\",\r\n                        \"Access-Control-Allow-Credentials\": \"true\",\r\n                        \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\r\n                        \"Access-Control-Allow-Methods\": \"POST\",\r\n                        'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\r\n                    },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Error! status: ${response.status}`);\r\n                }\r\n                const result = (await response.json());\r\n\r\n                console.log('result is: ', JSON.stringify(result));\r\n\r\n                return result;\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    console.log('error message: ', error.message);\r\n                    return error.message;\r\n                } else {\r\n                    console.log('unexpected error: ', error);\r\n                    return 'An unexpected error occurred';\r\n                }\r\n            }\r\n            */\r\n    }\r\n\r\n    return (<div></div>);\r\n}\r\n\r\nexport default PostCallDB;"],"mappings":"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"},"metadata":{},"sourceType":"module"}