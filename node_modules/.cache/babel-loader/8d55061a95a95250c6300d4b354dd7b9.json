{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirma\\\\data\\\\ap_2021_2022\\\\it-project\\\\ProjectAp2022\\\\it-project-frontend\\\\src\\\\components\\\\Compare\\\\ApiCallNBB.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport auth from \"../../class/Auth/Auth\";\nimport cookie from \"../../class/Cookie/Cookie\";\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base = cookie.GetCookies(\"base\");\n\nconst ApiCallNBB = _ref => {\n  _s();\n\n  let {\n    companyInfo,\n    companyVAT,\n    setCompanyInfo\n  } = _ref;\n  const [errorState1, setErrorState1] = useState(false);\n  const [errorState2, setErrorState2] = useState(false);\n  const [loading, setLoading] = useState(true); //arranges the post, will be moved to a component of its own.\n\n  useEffect(() => {\n    //for testing purposes please regard changing your localhost port.\n    Promise.all([GetCompanyDetails()]);\n  }, []); //response can only be called per method, this is the reason two API call methodes were made.\n  //both calls are in a try catch so the app won't crash, user will be notified if the VAT they've used was valid.\n\n  const createHistory = async epost => {\n    if (auth.Auth()) {\n      try {\n        const response = await fetch(`${base}/api/history/history`, {\n          method: 'POST',\n          body: JSON.stringify(epost),\n          headers: {\n            'Content-Type': 'application/json',\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Credentials\": \"true\",\n            \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\n            \"Access-Control-Allow-Methods\": \"POST\",\n            'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error(`Error! status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log('result is: ', JSON.stringify(result));\n        return result;\n      } catch (error) {\n        if (error instanceof Error) {\n          console.log('error message: ', error.message);\n          return error.message;\n        } else {\n          console.log('unexpected error: ', error);\n          return 'An unexpected error occurred';\n        }\n      }\n    }\n  };\n\n  const GetCompanyDetails = async () => {\n    setLoading(true);\n    let dataBucket = [];\n    let errorcount = 0;\n\n    for (let i = 0; i < companyVAT.length; i++) {\n      try {\n        errorcount = errorcount + 1;\n        let url = `${base}/nbbapi/${companyVAT[i]}`;\n        let response = await fetch(`${url}`, {\n          method: 'GET',\n          headers: {\n            'content-type': 'application/json',\n            'Access-Control-Allow-Origin': '*'\n          }\n        });\n        let data = await response.json();\n        dataBucket = [...dataBucket, ...data.finalCompanyData];\n      } catch (error) {\n        errorState(errorcount);\n      }\n    }\n\n    setCompanyInfo(dataBucket);\n    setLoading(false);\n  }; //errorState method determines which exception needs to be triggered.\n\n\n  const errorState = count => {\n    console.log(count);\n\n    if (count === 1) {\n      setErrorState1(true);\n    } else if (count === 2) {\n      setErrorState2(true);\n    } else {\n      setErrorState1(true);\n      setErrorState2(true);\n    }\n  };\n  /*const GetCompanyDetailsFirst = async () => {\r\n      try {\r\n          setLoading(true);\r\n          let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\r\n          let response = await fetch(`${url}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                  'content-type': 'application/json',\r\n                  'Access-Control-Allow-Origin': '*'\r\n              }\r\n          });\r\n          let data = await response.json();\r\n    \r\n    \r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n         \r\n          setLoading(false);\r\n        } catch (error) {\r\n          setErrorState1(true);\r\n      }\r\n    }\r\n  const GetCompanyDetailsSecond = async () => {\r\n        try {\r\n          setLoading(true);\r\n          let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\r\n          let response = await fetch(`${url}`, {\r\n              method: 'GET',\r\n              headers: {\r\n                  'content-type': 'application/json',\r\n                  'Access-Control-Allow-Origin': '*'\r\n              }\r\n          });\r\n          let data = await response.json();\r\n          const hold = data;\r\n          \r\n          setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n          PostToHistory(data.finalCompanyData .pop())\r\n          setLoading(false);\r\n        } catch (error) {\r\n          setErrorState2(true);\r\n      }\r\n    }*/\n  //renders that the user will see when they've provide the data, condition statements make sure the user will be notified when wrong inputs have been made.\n\n\n  if (errorState1 === false && errorState2 === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-around\",\n      children: /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }, this);\n  } else if (errorState1 === true && errorState2 === false) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: \"Failed to find the first result, please try again with a valid VAT number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }, this);\n  } else if (errorState1 === false && errorState2 === true) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"alert alert-danger\",\n        role: \"alert\",\n        children: \"Failed to find the second result, please try again with a valid VAT number!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CompanyCard, {\n        companyInfo: companyInfo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-danger\",\n      role: \"alert\",\n      children: \"Failed to find any results, please try again using valid VAT numbers!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_s(ApiCallNBB, \"x0pnD5acpDmGEmkfuwj7RSJAbwc=\");\n\n_c = ApiCallNBB;\nexport default ApiCallNBB;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApiCallNBB\");","map":{"version":3,"names":["useEffect","useState","auth","cookie","CompanyCard","base","GetCookies","ApiCallNBB","companyInfo","companyVAT","setCompanyInfo","errorState1","setErrorState1","errorState2","setErrorState2","loading","setLoading","Promise","all","GetCompanyDetails","createHistory","epost","Auth","response","fetch","method","body","JSON","stringify","headers","ok","Error","status","result","json","console","log","error","message","dataBucket","errorcount","i","length","url","data","finalCompanyData","errorState","count"],"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/components/Compare/ApiCallNBB.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport auth from \"../../class/Auth/Auth\";\r\nimport cookie from \"../../class/Cookie/Cookie\";\r\nimport { ICompanyData, IPostCompanyData } from \"../../types\";\r\nimport CompanyCard from \"../CompanyCard/CompanyCard\";\r\nimport PostCallDB from \"./PostCallDB\";\r\n\r\nconst base =    cookie.GetCookies(\"base\");\r\n\r\n\r\n\r\ninterface APICallNBBProps {\r\n    companyVAT: string[],\r\n    companyInfo: ICompanyData[],\r\n    setCompanyInfo: React.Dispatch<React.SetStateAction<ICompanyData[]>>\r\n}\r\n\r\n\r\nconst ApiCallNBB = ({ companyInfo, companyVAT, setCompanyInfo }: APICallNBBProps) => {\r\n    const [errorState1, setErrorState1] = useState<boolean>(false);\r\n    const [errorState2, setErrorState2] = useState<boolean>(false);\r\n    const [loading, setLoading] = useState<boolean>(true);\r\n\r\n\r\n    //arranges the post, will be moved to a component of its own.\r\n\r\n    useEffect(() => {\r\n        //for testing purposes please regard changing your localhost port.\r\n        Promise.all([GetCompanyDetails()]);\r\n\r\n\r\n    }, []);\r\n    //response can only be called per method, this is the reason two API call methodes were made.\r\n    //both calls are in a try catch so the app won't crash, user will be notified if the VAT they've used was valid.\r\n\r\n\r\n    const createHistory = async (epost:ICompanyData) => {\r\n        if (auth.Auth()) {\r\n            try {\r\n                const response = await fetch(`${base}/api/history/history`, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(epost),\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        \"Access-Control-Allow-Origin\": \"*\",\r\n                        \"Access-Control-Allow-Credentials\": \"true\",\r\n                        \"Access-Control-Allow-Headers\": \"Content-Type, Depth, User-Agent, X-File-Size, X-Requested-With, If-Modified-Since, X-File-Name, Cache-Control\",\r\n                        \"Access-Control-Allow-Methods\": \"POST\",\r\n                        'Authorization': `Bearer ${cookie.GetCookies(\"token\")}`\r\n                    },\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Error! status: ${response.status}`);\r\n                }\r\n                const result = (await response.json());\r\n\r\n                console.log('result is: ', JSON.stringify(result));\r\n\r\n                return result;\r\n            } catch (error) {\r\n                if (error instanceof Error) {\r\n                    console.log('error message: ', error.message);\r\n                    return error.message;\r\n                } else {\r\n                    console.log('unexpected error: ', error);\r\n                    return 'An unexpected error occurred';\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n    \r\n\r\n    const GetCompanyDetails = async () => {\r\n\r\n        setLoading(true);\r\n        let dataBucket: ICompanyData[] = [];\r\n        let errorcount = 0;\r\n        for (let i = 0; i < companyVAT.length; i++) {\r\n            try {\r\n                errorcount = errorcount + 1;\r\n                let url = `${base}/nbbapi/${companyVAT[i]}`;\r\n                let response = await fetch(`${url}`, {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'content-type': 'application/json',\r\n                        'Access-Control-Allow-Origin': '*'\r\n                    }\r\n                });\r\n                let data = await response.json();\r\n               \r\n              \r\n                dataBucket = [...dataBucket, ...data.finalCompanyData as ICompanyData[]];\r\n            }\r\n\r\n            catch (error) {\r\n                errorState(errorcount);\r\n\r\n            }\r\n        }\r\n        setCompanyInfo(dataBucket);\r\n        setLoading(false);\r\n    }\r\n\r\n    //errorState method determines which exception needs to be triggered.\r\n    const errorState = (count: number) => {\r\n        console.log(count);\r\n\r\n        if (count === 1) {\r\n            setErrorState1(true);\r\n        }\r\n        else if (count === 2) {\r\n            setErrorState2(true);\r\n        }\r\n        else {\r\n            setErrorState1(true);\r\n            setErrorState2(true);\r\n        }\r\n    }\r\n\r\n    /*const GetCompanyDetailsFirst = async () => {\r\n        try {\r\n            setLoading(true);\r\n            let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\r\n            let response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            });\r\n            let data = await response.json();\r\n      \r\n      \r\n\r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n           \r\n            setLoading(false);\r\n\r\n        } catch (error) {\r\n            setErrorState1(true);\r\n        }\r\n\r\n    }\r\n    const GetCompanyDetailsSecond = async () => {\r\n\r\n        try {\r\n            setLoading(true);\r\n            let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\r\n            let response = await fetch(`${url}`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'content-type': 'application/json',\r\n                    'Access-Control-Allow-Origin': '*'\r\n                }\r\n            });\r\n            let data = await response.json();\r\n            const hold = data;\r\n            \r\n            setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n            PostToHistory(data.finalCompanyData .pop())\r\n            setLoading(false);\r\n\r\n        } catch (error) {\r\n            setErrorState2(true);\r\n        }\r\n\r\n    }*/\r\n\r\n    //renders that the user will see when they've provide the data, condition statements make sure the user will be notified when wrong inputs have been made.\r\n\r\n\r\n\r\n    if (errorState1 === false && errorState2 === false) {\r\n        return (\r\n            <div className=\"d-flex justify-content-around\">\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n    else if (errorState1 === true && errorState2 === false) {\r\n        return (\r\n            <div >\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to find the first result, please try again with a valid VAT number!\r\n                </div>\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    else if (errorState1 === false && errorState2 === true) {\r\n        return (\r\n            <div>\r\n                <div className=\"alert alert-danger\" role=\"alert\">\r\n                    Failed to find the second result, please try again with a valid VAT number!\r\n                </div>\r\n                <CompanyCard companyInfo={companyInfo} />\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                Failed to find any results, please try again using valid VAT numbers!\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default ApiCallNBB;"],"mappings":"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"},"metadata":{},"sourceType":"module"}