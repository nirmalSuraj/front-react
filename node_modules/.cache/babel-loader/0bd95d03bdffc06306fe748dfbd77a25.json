{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nirma\\\\data\\\\ap_2021_2022\\\\it-project\\\\ProjectAp2022\\\\it-project-frontend\\\\src\\\\components\\\\CompanyCard\\\\CompanyCard.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CompaniesDetailScreen = _ref => {\n  _s();\n\n  let {\n    companyInfo,\n    vatInput,\n    setCompanyInfo\n  } = _ref;\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    GetCompanyDetailsFirst();\n    GetCompanyDetailsSecond();\n  }, []); //response can only be called per method, this is the reason two API call methode where made.\n\n  const GetCompanyDetailsFirst = async () => {\n    setLoading(true);\n    let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\n    let response = await fetch(`${url}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    let data = await response.json();\n    console.log(data);\n    setCompanyInfo(data.finalCompanyData);\n    setLoading(false);\n  };\n\n  const GetCompanyDetailsSecond = async () => {\n    setLoading(true);\n    let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\n    let response = await fetch(`${url}`, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    let data = await response.json();\n    console.log(data);\n    setCompanyInfo(data.finalCompanyData);\n    setLoading(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col d-flex justify-content-center\",\n    children: companyInfo === null || companyInfo === void 0 ? void 0 : companyInfo.map(c => {\n      return /*#__PURE__*/_jsxDEV(Card, {\n        style: {\n          width: '60%'\n        },\n        children: /*#__PURE__*/_jsxDEV(Card.Body, {\n          children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n            children: c.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"VAT : \", c.vat, \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Adress: \", c.address]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Publishing Date: \", c.depositDate]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Equity: \", c.equitity]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Debts: \", c.debt]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Card.Text, {\n            children: [\"Profit: \", c.companyProfit]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CompaniesDetailScreen, \"J7PPXooW06IQ11rfabbvgk72KFw=\");\n\n_c = CompaniesDetailScreen;\nexport default CompaniesDetailScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompaniesDetailScreen\");","map":{"version":3,"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/components/CompanyCard/CompanyCard.tsx"],"names":["useEffect","useState","Card","CompaniesDetailScreen","companyInfo","vatInput","setCompanyInfo","loading","setLoading","GetCompanyDetailsFirst","GetCompanyDetailsSecond","url","response","fetch","method","headers","data","json","console","log","finalCompanyData","map","c","width","name","vat","address","depositDate","equitity","debt","companyProfit"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { Card, Button } from \"react-bootstrap\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { SiteContext } from \"../../context\";\r\nimport { ICompanyData } from \"../../types\";\r\n\r\ninterface CompanyCardProps {\r\n  vatInput: string[],\r\n  companyInfo: ICompanyData[],\r\n  setCompanyInfo: React.Dispatch<React.SetStateAction<ICompanyData[]>>\r\n}\r\n\r\nconst CompaniesDetailScreen = ({ companyInfo, vatInput, setCompanyInfo }: CompanyCardProps) => {\r\n\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    GetCompanyDetailsFirst();\r\n    GetCompanyDetailsSecond();\r\n\r\n\r\n  }, []);\r\n//response can only be called per method, this is the reason two API call methode where made.\r\n  const GetCompanyDetailsFirst = async () => {\r\n\r\n    setLoading(true);\r\n    let url = `https://localhost:44391/nbbapi/${vatInput[0]}`;\r\n    let response = await fetch(`${url}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*'\r\n      }\r\n    });\r\n    let data = await response.json();\r\n    console.log(data);\r\n    setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n    setLoading(false);\r\n  }\r\n  const GetCompanyDetailsSecond = async () => {\r\n    setLoading(true);\r\n    let url = `https://localhost:44391/nbbapi/${vatInput[1]}`;\r\n    let response = await fetch(`${url}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'content-type': 'application/json',\r\n        'Access-Control-Allow-Origin': '*'\r\n      }\r\n    });\r\n    let data = await response.json();\r\n    console.log(data);\r\n    setCompanyInfo(data.finalCompanyData as ICompanyData[]);\r\n    setLoading(false);\r\n\r\n\r\n\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"col d-flex justify-content-center\">\r\n      {companyInfo?.map((c: ICompanyData) => {\r\n\r\n        return (\r\n          <Card style={{ width: '60%' }}>\r\n\r\n            <Card.Body >\r\n              <Card.Title>{c.name}</Card.Title>\r\n              <Card.Text>VAT : {c.vat} </Card.Text>\r\n              <Card.Text>Adress: {c.address}</Card.Text>\r\n              <Card.Text>Publishing Date: {c.depositDate}</Card.Text>\r\n              <Card.Text>Equity: {c.equitity}</Card.Text>\r\n              <Card.Text>Debts: {c.debt}</Card.Text>\r\n              <Card.Text>Profit: {c.companyProfit}</Card.Text>\r\n            </Card.Body>\r\n          </Card>\r\n\r\n        )\r\n      }\r\n      )}\r\n\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default CompaniesDetailScreen;"]},"metadata":{},"sourceType":"module"}