{"ast":null,"code":"class Utility {\n  /**\r\n   * \r\n   * @param name string\r\n   * @returns string|null \r\n   */\n  // Given a cookie key `name`, returns the value of\n  // the cookie or `null`, if the key is not found.\n  Cookie(name) {\n    const nameLenPlus = name.length + 1;\n    const val = document.cookie.split(';').map(c => c.trim()).filter(cookie => {\n      return cookie.substring(0, nameLenPlus) === `${name}=`;\n    }).map(cookie => {\n      return decodeURIComponent(cookie.substring(nameLenPlus));\n    })[0] || null;\n    return val;\n  }\n\n  AuthSession(name) {\n    if (this.Cookie(name) === null) return false;\n    if (this.Cookie(name) == \"true\") return true;\n    if (this.Cookie(name) == \"flase\") return true;\n    return false;\n  }\n  /**\r\n   * \r\n   * @param name  string name of the cookie\r\n   * @returns string value of the cookie\r\n   */\n\n\n  GetCookies(name) {\n    const cookie = this.Cookie(name);\n    if (cookie === null) return false;\n    return cookie;\n  }\n  /**\r\n   * \r\n   * @param name string key cookie\r\n   * @param value string value of the cookie\r\n   * @param days number days  expires in 30 days\r\n   * @returns bool if the cookie was created then return true els false\r\n   */\n\n\n  SetCookie(name, value, days) {\n    let expires = \"\";\n\n    if (days) {\n      var date = new Date();\n      date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);\n      expires = \"; expires=\" + date.toUTCString();\n    }\n\n    document.cookie = name + \"=\" + (value || \"\") + expires + \"; path=/\";\n    if (this.GetCookies(name) !== null) return true;else return false;\n  }\n\n  Delete_cookie(name) {\n    document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n  }\n\n}\n\nconst utility = new Utility();\nexport default utility;","map":{"version":3,"sources":["C:/Users/Nirma/data/ap_2021_2022/it-project/ProjectAp2022/it-project-frontend/src/class/Utility/Utility.ts"],"names":["Utility","Cookie","name","nameLenPlus","length","val","document","cookie","split","map","c","trim","filter","substring","decodeURIComponent","AuthSession","GetCookies","SetCookie","value","days","expires","date","Date","setTime","getTime","toUTCString","Delete_cookie","utility"],"mappings":"AAAA,MAAMA,OAAN,CAAa;AACZ;AACD;AACA;AACA;AACA;AAEA;AACA;AACSC,EAAAA,MAAM,CAACC,IAAD,EAA2B;AACzC,UAAMC,WAAW,GAAID,IAAI,CAACE,MAAL,GAAc,CAAnC;AAGA,UAAMC,GAAe,GAAGC,QAAQ,CAACC,MAAT,CACtBC,KADsB,CAChB,GADgB,EAEtBC,GAFsB,CAElBC,CAAC,IAAIA,CAAC,CAACC,IAAF,EAFa,EAGtBC,MAHsB,CAGfL,MAAM,IAAI;AACjB,aAAOA,MAAM,CAACM,SAAP,CAAiB,CAAjB,EAAoBV,WAApB,MAAsC,GAAED,IAAK,GAApD;AACA,KALsB,EAMtBO,GANsB,CAMlBF,MAAM,IAAI;AACd,aAAOO,kBAAkB,CAACP,MAAM,CAACM,SAAP,CAAiBV,WAAjB,CAAD,CAAzB;AACA,KARsB,EAQpB,CARoB,KAQd,IARV;AAUO,WAAOE,GAAP;AACP;;AAGOU,EAAAA,WAAW,CAACb,IAAD,EAAqB;AAEpC,QAAG,KAAKD,MAAL,CAAYC,IAAZ,MAAsB,IAAzB,EAA+B,OAAO,KAAP;AAE/B,QAAG,KAAKD,MAAL,CAAYC,IAAZ,KAAqB,MAAxB,EAAgC,OAAO,IAAP;AAChC,QAAG,KAAKD,MAAL,CAAYC,IAAZ,KAAqB,OAAxB,EAAiC,OAAO,IAAP;AAEjC,WAAO,KAAP;AAEH;AAKD;AACA;AACA;AACA;AACA;;;AAEQc,EAAAA,UAAU,CAACd,IAAD,EAA4B;AAC7C,UAAMK,MAAkB,GAAG,KAAKN,MAAL,CAAYC,IAAZ,CAA3B;AACG,QAAGK,MAAM,KAAK,IAAd,EAAoB,OAAO,KAAP;AAEpB,WAAOA,MAAP;AAEH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEQU,EAAAA,SAAS,CAACf,IAAD,EAAagB,KAAb,EAAuBC,IAAvB,EAA4C;AAE5D,QAAIC,OAAc,GAAG,EAArB;;AAEG,QAAID,IAAJ,EAAU;AACN,UAAIE,IAAI,GAAG,IAAIC,IAAJ,EAAX;AACAD,MAAAA,IAAI,CAACE,OAAL,CAAaF,IAAI,CAACG,OAAL,KAAkBL,IAAI,GAAC,EAAL,GAAQ,EAAR,GAAW,EAAX,GAAc,IAA7C;AACAC,MAAAA,OAAO,GAAG,eAAeC,IAAI,CAACI,WAAL,EAAzB;AACH;;AACDnB,IAAAA,QAAQ,CAACC,MAAT,GAAkBL,IAAI,GAAG,GAAP,IAAcgB,KAAK,IAAI,EAAvB,IAA8BE,OAA9B,GAAwC,UAA1D;AAGH,QAAG,KAAKJ,UAAL,CAAgBd,IAAhB,MAA0B,IAA7B,EAAmC,OAAO,IAAP,CAAnC,KACK,OAAO,KAAP;AAEL;;AAGMwB,EAAAA,aAAa,CAACxB,IAAD,EAAO;AAC1BI,IAAAA,QAAQ,CAACC,MAAT,GAAkBL,IAAI,GAAE,mDAAxB;AACE;;AAnFU;;AAwFb,MAAMyB,OAAO,GAAG,IAAI3B,OAAJ,EAAhB;AAEA,eAAgB2B,OAAhB","sourcesContent":["class Utility{\r\n\t/**\r\n\t * \r\n\t * @param name string\r\n\t * @returns string|null \r\n\t */\r\n\r\n// Given a cookie key `name`, returns the value of\r\n// the cookie or `null`, if the key is not found.\r\nprivate  Cookie(name: string):string|null {\r\n\tconst nameLenPlus = (name.length + 1);\r\n\r\n\r\n\tconst val:string|null = document.cookie\r\n\t\t.split(';')\r\n\t\t.map(c => c.trim())\r\n\t\t.filter(cookie => {\r\n\t\t\treturn cookie.substring(0, nameLenPlus) === `${name}=`;\r\n\t\t})\r\n\t\t.map(cookie => {\r\n\t\t\treturn decodeURIComponent(cookie.substring(nameLenPlus));\r\n\t\t})[0] || null;\r\n  \r\n        return val;\r\n}\r\n\r\n\r\npublic  AuthSession(name:string):boolean{\r\n\r\n    if(this.Cookie(name) === null) return false;\r\n\r\n    if(this.Cookie(name) == \"true\") return true;\r\n    if(this.Cookie(name) == \"flase\") return true;\r\n\r\n    return false;\r\n\r\n}\r\n\r\n\r\n \r\n\r\n/**\r\n * \r\n * @param name  string name of the cookie\r\n * @returns string value of the cookie\r\n */\r\n\r\npublic  GetCookies(name:string):string|boolean{\r\n\tconst cookie:string|null = this.Cookie(name);\r\n    if(cookie === null) return false;\r\n\r\n    return cookie;\r\n\r\n}\r\n\r\n/**\r\n * \r\n * @param name string key cookie\r\n * @param value string value of the cookie\r\n * @param days number days  expires in 30 days\r\n * @returns bool if the cookie was created then return true els false\r\n */\r\n\r\npublic  SetCookie(name:string,value:any,days:number):boolean {\r\n\t\r\n\tlet expires:string = \"\";\r\n\r\n    if (days) {\r\n        var date = new Date();\r\n        date.setTime(date.getTime() + (days*24*60*60*1000));\r\n        expires = \"; expires=\" + date.toUTCString();\r\n    }\r\n    document.cookie = name + \"=\" + (value || \"\")  + expires + \"; path=/\";\r\n\r\n\r\n\tif(this.GetCookies(name) !== null) return true;\r\n\telse return false;\r\n\r\n}\r\n\r\n\r\npublic Delete_cookie(name) {\r\n\tdocument.cookie = name +'=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\r\n  }\r\n\r\n\r\n}\r\n\r\nconst utility = new Utility();\r\n\r\nexport  default utility;"]},"metadata":{},"sourceType":"module"}